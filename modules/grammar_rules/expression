expr: choice DOT DOT choice 
choice: operation CHOICE operation                                --> DOT means .  1..10
operation: term ((GT|LT|GE|LE|PLUS|MINUS) term)*      --> GT means >; LT means <; GE means >=; LE means <=, PLUS means +; MINUS means -; CHOISE means |; EQUAL means =                    
term: factor ((MUL|DIV) factor)*                                   --> MUL means *; DIV means /
factor: INTEGER  
      : brackets
      : (MINUS|PLUS) arith                             --> UNARY OPERATION. May need to change from arith to expr
      : func_call
      : fail
      : indexing
      : binding
      : scope
      : if_statement
      : for_loop
      : sequence
      : Identifier

indexing: (Identifier SLB expr SRB)                         --> SLB/SRB SQUARE (LEFT/RIGHT) BRACKETS a[i:int] 
binding: (Identifier BINDING expr)                            --> BINDING means :=
scope: (Identifier COLON type)      --> COLON means :
Identifier: IDENTIFIER                                 --> IDENTIFIER method name or variable name (a..z)*

type: INT 
      : TUPLE LB type (,type)* RB                     --> INT means int; TUPLE means tuple

brackets: LB block RB                                  --> LB/RB (LEFT/RIGHT) BRACKETS

sequence: LB (expr COMMA expr)* RB                    --> tuple (n1,...)
          array CBL expr (COMMA expr)*? CBR           --> long-form syntax and singleton tuple/array array{n1} oder array{n1,...}





 