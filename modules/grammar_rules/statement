program: block 


block: statement (SEMI statement)*?                                  --> SEMI means ;
statement: expr|nested_scope|flexible_eq | func_decl



func_call: (Identifier LB (func_call_args)? RB)    

func_call_args: expr (COMMA expr)*?                                          --> COMMA means ,




func_decl: Identifier LB func_dec_param RB (COLON type)? BINDING block
          |Identifier BINDING LB nested_scope LAMBDA expr RB                  --> LAMBDA means =>         Maybe instead of expr use statement_list

func_dec_param: nested_scope



if_statement: IF LB rigid_eq RB ((THEN block ELSE block) | (THEN CBL expr CBR ELSE CBL expr CBR))    --> THEN means then; ELSE means else


for_loop: FOR LCB (scope|expr) (;expr)*? RCB                                  --> LCB/RCB means (LEFT/RIGHT) CURVY BRACKETS; FOR means for
    |FOR LB (scope|expr) (,expr)*? RB DO expr



nested_scope: (Identifier COMMA Identifier)* COLON TYPE
         

rigid_eq = (block (EQUAL expr)*)
flexible_eq = (Identifier EQUAL expr)